#!/usr/bin/env bash
set -euo pipefail

REGION="${AWS_REGION:-us-east-2}"
PROJECT="memory-finder"
ROLE_NAME="${PROJECT}-lambda-basic-exec"
ROLE_ARN=""

ensure_role() {
  echo "Ensuring IAM role $ROLE_NAME exists..."
  if AWS_PROFILE=memory-finder aws iam get-role --role-name "$ROLE_NAME" >/dev/null 2>&1; then
    ROLE_ARN=$(AWS_PROFILE=memory-finder aws iam get-role --role-name "$ROLE_NAME" --query 'Role.Arn' --output text)
  else
    ROLE_ARN=$(AWS_PROFILE=memory-finder aws iam create-role \
      --role-name "$ROLE_NAME" \
      --assume-role-policy-document '{"Version":"2012-10-17","Statement":[{"Effect":"Allow","Principal":{"Service":"lambda.amazonaws.com"},"Action":"sts:AssumeRole"}]}' \
      --query 'Role.Arn' --output text)
    AWS_PROFILE=memory-finder aws iam attach-role-policy --role-name "$ROLE_NAME" --policy-arn arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  fi
  echo "ROLE_ARN=$ROLE_ARN"
}

zip_handler() {
  local name="$1"; shift
  local src="handlers/${name}.mjs"
  local zip="/tmp/${name}.zip"
  [ -f "$src" ] || { echo "Missing handler: $src"; return 1; }
  rm -f "$zip"
  (cd handlers && zip -q "$zip" "${name}.mjs")
  echo "$zip"
}

upsert_lambda() {
  local func="$1"; shift
  local filebase="$1"; shift
  local zip
  zip=$(zip_handler "$filebase")
  echo "Deploying Lambda $func from $zip..."
  if AWS_PROFILE=memory-finder aws lambda get-function --function-name "$func" >/dev/null 2>&1; then
    AWS_PROFILE=memory-finder aws lambda update-function-code --function-name "$func" --zip-file "fileb://$zip" >/dev/null
    AWS_PROFILE=memory-finder aws lambda update-function-configuration --function-name "$func" --role "$ROLE_ARN" --runtime nodejs20.x --handler "${filebase}.handler" --timeout 60 --memory-size 512 >/dev/null
  else
    AWS_PROFILE=memory-finder aws lambda create-function \
      --function-name "$func" \
      --runtime nodejs20.x \
      --role "$ROLE_ARN" \
      --handler "${filebase}.handler" \
      --zip-file "fileb://$zip" \
      --timeout 60 \
      --memory-size 512 \
      --region "$REGION" >/dev/null
  fi
  AWS_PROFILE=memory-finder aws lambda wait function-updated --function-name "$func" >/dev/null
  AWS_PROFILE=memory-finder aws lambda get-function --function-name "$func" --query 'Configuration.FunctionArn' --output text
}

main() {
  ensure_role
  echo "Region: $REGION"

  INIT_ARN=$(upsert_lambda "${PROJECT}-InitJob" init-job)
  BUILD_ARN=$(upsert_lambda "${PROJECT}-BuildSegments" build-segments)
  PERSIST_ARN=$(upsert_lambda "${PROJECT}-PersistMetadata" persist-metadata)
  NOTIFY_ARN=$(upsert_lambda "${PROJECT}-NotifyComplete" notify-complete)
  EMBEDDINGS_ARN=$(upsert_lambda "${PROJECT}-GenerateEmbeddings" generate-embeddings)

  echo "\nDeployed Lambda ARNs:"
  echo "lambda_init_arn                 = \"$INIT_ARN\""
  echo "lambda_build_segments_arn       = \"$BUILD_ARN\""
  echo "lambda_persist_metadata_arn     = \"$PERSIST_ARN\""
  echo "lambda_notify_arn               = \"$NOTIFY_ARN\""
  echo "lambda_generate_embeddings_arn  = \"$EMBEDDINGS_ARN\""

  cat > infra/terraform/terraform.tfvars.lambdas <<EOV
# Generated by scripts/deploy-lambdas.sh
lambda_init_arn                 = "$INIT_ARN"
lambda_build_segments_arn       = "$BUILD_ARN"
lambda_persist_metadata_arn     = "$PERSIST_ARN"
lambda_notify_arn               = "$NOTIFY_ARN"
lambda_generate_embeddings_arn  = "$EMBEDDINGS_ARN"
EOV
  echo "\nWrote ARNs to infra/terraform/terraform.tfvars.lambdas"
}

main "$@"
