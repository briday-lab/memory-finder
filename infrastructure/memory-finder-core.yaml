AWSTemplateFormatVersion: '2010-09-09'
Description: 'Memory Finder - Core AWS Infrastructure (No Database)'

Parameters:
  Environment:
    Type: String
    Default: 'prod'
    AllowedValues: ['dev', 'staging', 'prod']

Resources:
  # ============================================================================
  # S3 Buckets for Video Storage
  # ============================================================================
  RawVideoBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'memory-finder-raw-${AWS::AccountId}-${AWS::Region}'
      VersioningConfiguration:
        Status: Enabled
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ['*']
            AllowedMethods: [GET, PUT, POST, DELETE, HEAD]
            AllowedOrigins: ['*']
            MaxAge: 3000
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-raw-videos'

  ProcessedVideoBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'memory-finder-processed-${AWS::AccountId}-${AWS::Region}'
      VersioningConfiguration:
        Status: Enabled
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-processed-videos'

  ThumbnailsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'memory-finder-thumbnails-${AWS::AccountId}-${AWS::Region}'
      VersioningConfiguration:
        Status: Enabled
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-thumbnails'

  AnalysisBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'memory-finder-analysis-${AWS::AccountId}-${AWS::Region}'
      VersioningConfiguration:
        Status: Enabled
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-analysis'

  CompilationsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'memory-finder-compilations-${AWS::AccountId}-${AWS::Region}'
      VersioningConfiguration:
        Status: Enabled
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-compilations'

  # ============================================================================
  # IAM Roles and Policies
  # ============================================================================
  MediaConvertRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-mediaconvert-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: mediaconvert.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-lambda-execution-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AmazonRekognitionFullAccess
        - arn:aws:iam::aws:policy/AmazonTranscribeFullAccess
        - arn:aws:iam::aws:policy/AmazonSageMakerFullAccess
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess

  # ============================================================================
  # Lambda Functions
  # ============================================================================
  VideoProcessingFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-video-processing'
      Runtime: python3.9
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 900
      MemorySize: 1024
      Environment:
        Variables:
          RAW_BUCKET: !Ref RawVideoBucket
          PROCESSED_BUCKET: !Ref ProcessedVideoBucket
          THUMBNAILS_BUCKET: !Ref ThumbnailsBucket
          ANALYSIS_BUCKET: !Ref AnalysisBucket
      Code:
        ZipFile: |
          import json
          import boto3
          
          def handler(event, context):
              return {
                  'statusCode': 200,
                  'body': json.dumps('Video processing function ready')
              }

  # ============================================================================
  # Step Functions
  # ============================================================================
  VideoProcessingStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: !Sub '${AWS::StackName}-video-processing-workflow'
      RoleArn: !GetAtt StepFunctionsRole.Arn
      DefinitionString: !Sub |
        {
          "Comment": "Memory Finder Video Processing Workflow",
          "StartAt": "ProcessVideo",
          "States": {
            "ProcessVideo": {
              "Type": "Task",
              "Resource": "${VideoProcessingFunction.Arn}",
              "Next": "StoreResults",
              "Retry": [
                {
                  "ErrorEquals": ["States.ALL"],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 3
                }
              ]
            },
            "StoreResults": {
              "Type": "Task",
              "Resource": "${VideoProcessingFunction.Arn}",
              "End": true,
              "Retry": [
                {
                  "ErrorEquals": ["States.ALL"],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 3
                }
              ]
            }
          }
        }

  StepFunctionsRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-stepfunctions-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSStepFunctionsFullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AmazonRekognitionFullAccess
        - arn:aws:iam::aws:policy/AmazonTranscribeFullAccess
      Policies:
        - PolicyName: LambdaAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                  - lambda:InvokeAsync
                Resource: !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:*'

  # ============================================================================
  # DynamoDB Tables (Alternative to RDS)
  # ============================================================================
  ProjectsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${AWS::StackName}-projects'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: videographer_id
          AttributeType: S
        - AttributeName: created_at
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: VideographerIndex
          KeySchema:
            - AttributeName: videographer_id
              KeyType: HASH
            - AttributeName: created_at
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-projects-table'

  FilesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${AWS::StackName}-files'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: project_id
          AttributeType: S
        - AttributeName: created_at
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: ProjectIndex
          KeySchema:
            - AttributeName: project_id
              KeyType: HASH
            - AttributeName: created_at
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-files-table'

  VideoMomentsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${AWS::StackName}-video-moments'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: project_id
          AttributeType: S
        - AttributeName: confidence_score
          AttributeType: N
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: ProjectConfidenceIndex
          KeySchema:
            - AttributeName: project_id
              KeyType: HASH
            - AttributeName: confidence_score
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-video-moments-table'

  # ============================================================================
  # CloudFront Distribution
  # ============================================================================
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - Id: S3Origin
            DomainName: !GetAtt RawVideoBucket.RegionalDomainName
            S3OriginConfig:
              OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}'
        Enabled: true
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods: [GET, HEAD, OPTIONS]
          CachedMethods: [GET, HEAD]
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          Compress: true
        PriceClass: PriceClass_100
        ViewerCertificate:
          CloudFrontDefaultCertificate: true

  CloudFrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub 'OAI for ${AWS::StackName}'

Outputs:
  RawVideoBucketName:
    Description: 'Raw video S3 bucket name'
    Value: !Ref RawVideoBucket
    Export:
      Name: !Sub '${AWS::StackName}-RawVideo-Bucket'

  ProcessedVideoBucketName:
    Description: 'Processed video S3 bucket name'
    Value: !Ref ProcessedVideoBucket
    Export:
      Name: !Sub '${AWS::StackName}-ProcessedVideo-Bucket'

  MediaConvertRoleArn:
    Description: 'MediaConvert role ARN'
    Value: !GetAtt MediaConvertRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-MediaConvert-Role'

  LambdaExecutionRoleArn:
    Description: 'Lambda execution role ARN'
    Value: !GetAtt LambdaExecutionRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-Lambda-Role'

  CloudFrontDistributionDomain:
    Description: 'CloudFront distribution domain'
    Value: !GetAtt CloudFrontDistribution.DomainName
    Export:
      Name: !Sub '${AWS::StackName}-CloudFront-Domain'

  StepFunctionsStateMachineArn:
    Description: 'Step Functions state machine ARN'
    Value: !Ref VideoProcessingStateMachine
    Export:
      Name: !Sub '${AWS::StackName}-StepFunctions-StateMachine'

  ProjectsTableName:
    Description: 'Projects DynamoDB table name'
    Value: !Ref ProjectsTable
    Export:
      Name: !Sub '${AWS::StackName}-ProjectsTable-Name'

  FilesTableName:
    Description: 'Files DynamoDB table name'
    Value: !Ref FilesTable
    Export:
      Name: !Sub '${AWS::StackName}-FilesTable-Name'

  VideoMomentsTableName:
    Description: 'Video Moments DynamoDB table name'
    Value: !Ref VideoMomentsTable
    Export:
      Name: !Sub '${AWS::StackName}-VideoMomentsTable-Name'
