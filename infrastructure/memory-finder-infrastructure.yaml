AWSTemplateFormatVersion: '2010-09-09'
Description: 'Memory Finder - Complete AWS SaaS Architecture for Wedding Video Intelligence Platform'

Parameters:
  Environment:
    Type: String
    Default: 'prod'
    AllowedValues: ['dev', 'staging', 'prod']
    Description: 'Environment name'
  
  DomainName:
    Type: String
    Default: 'memory-finder.com'
    Description: 'Domain name for the application'
  
  AdminEmail:
    Type: String
    Default: 'admin@memory-finder.com'
    Description: 'Admin email for notifications'
  
  DatabasePassword:
    Type: String
    NoEcho: true
    Description: 'Database password'

Conditions:
  IsProd: !Equals [!Ref Environment, 'prod']
  IsNotProd: !Not [!Equals [!Ref Environment, 'prod']]

Resources:
  # ============================================================================
  # VPC and Networking
  # ============================================================================
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-vpc'

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-public-subnet-1'

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-public-subnet-2'

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-private-subnet-1'

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.4.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-private-subnet-2'

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-igw'

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-public-routes'

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  # ============================================================================
  # Security Groups
  # ============================================================================
  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${AWS::StackName}-web-sg'
      GroupDescription: 'Security group for web servers'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-web-sg'

  DatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${AWS::StackName}-db-sg'
      GroupDescription: 'Security group for database'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref WebServerSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-db-sg'

  # ============================================================================
  # S3 Buckets for Video Storage
  # ============================================================================
  RawVideoBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'memory-finder-raw-${AWS::AccountId}-${AWS::Region}'
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: TransitionToIA
            Status: Enabled
            Transitions:
              - StorageClass: STANDARD_IA
                TransitionInDays: 30
          - Id: TransitionToGlacier
            Status: Enabled
            Transitions:
              - StorageClass: GLACIER
                TransitionInDays: 90
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ['*']
            AllowedMethods: [GET, PUT, POST, DELETE, HEAD]
            AllowedOrigins: ['*']
            MaxAge: 3000
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-raw-videos'

  ProcessedVideoBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'memory-finder-processed-${AWS::AccountId}-${AWS::Region}'
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: TransitionToIA
            Status: Enabled
            Transitions:
              - StorageClass: STANDARD_IA
                TransitionInDays: 30
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-processed-videos'

  ThumbnailsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'memory-finder-thumbnails-${AWS::AccountId}-${AWS::Region}'
      VersioningConfiguration:
        Status: Enabled
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-thumbnails'

  AnalysisBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'memory-finder-analysis-${AWS::AccountId}-${AWS::Region}'
      VersioningConfiguration:
        Status: Enabled
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-analysis'

  CompilationsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'memory-finder-compilations-${AWS::AccountId}-${AWS::Region}'
      VersioningConfiguration:
        Status: Enabled
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-compilations'

  # ============================================================================
  # RDS Database
  # ============================================================================
  DatabaseSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: 'Subnet group for Memory Finder database'
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-db-subnet-group'

  Database:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: !Sub '${AWS::StackName}-database'
      DBName: memoryfinder
      DBInstanceClass: 'db.t3.micro'
      Engine: postgres
      EngineVersion: '15.4'
      MasterUsername: memoryfinder
      MasterUserPassword: !Sub '${DatabasePassword}'
      AllocatedStorage: !If [IsProd, 100, 20]
      StorageType: gp2
      VPCSecurityGroups:
        - !Ref DatabaseSecurityGroup
      DBSubnetGroupName: !Ref DatabaseSubnetGroup
      BackupRetentionPeriod: !If [IsProd, 7, 1]
      MultiAZ: !If [IsProd, true, false]
      StorageEncrypted: true
      DeletionProtection: !If [IsProd, true, false]
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-database'

  # ============================================================================
  # ElastiCache Redis
  # ============================================================================
  CacheSubnetGroup:
    Type: AWS::ElastiCache::SubnetGroup
    Properties:
      Description: 'Subnet group for ElastiCache'
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2

  CacheSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${AWS::StackName}-cache-sg'
      GroupDescription: 'Security group for ElastiCache'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 6379
          ToPort: 6379
          SourceSecurityGroupId: !Ref WebServerSecurityGroup

  RedisCluster:
    Type: AWS::ElastiCache::CacheCluster
    Properties:
      CacheNodeType: 'cache.t1.micro'
      Engine: redis
      NumCacheNodes: 1
      VpcSecurityGroupIds:
        - !Ref CacheSecurityGroup
      CacheSubnetGroupName: !Ref CacheSubnetGroup
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-redis'

  # ============================================================================
  # IAM Roles and Policies
  # ============================================================================
  MediaConvertRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-mediaconvert-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: mediaconvert.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-lambda-execution-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AmazonRekognitionFullAccess
        - arn:aws:iam::aws:policy/AmazonTranscribeFullAccess
        - arn:aws:iam::aws:policy/AmazonSageMakerFullAccess
        - arn:aws:iam::aws:policy/AmazonRDSFullAccess
        - arn:aws:iam::aws:policy/AmazonElastiCacheFullAccess

  # ============================================================================
  # Lambda Functions
  # ============================================================================
  VideoProcessingFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-video-processing'
      Runtime: python3.9
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 900
      MemorySize: 1024
      Environment:
        Variables:
          RAW_BUCKET: !Ref RawVideoBucket
          PROCESSED_BUCKET: !Ref ProcessedVideoBucket
          THUMBNAILS_BUCKET: !Ref ThumbnailsBucket
          ANALYSIS_BUCKET: !Ref AnalysisBucket
          DATABASE_HOST: !GetAtt Database.Endpoint.Address
          DATABASE_NAME: memoryfinder
          DATABASE_USER: memoryfinder
          REDIS_HOST: !GetAtt RedisCluster.RedisEndpoint.Address
      Code:
        ZipFile: |
          import json
          import boto3
          
          def handler(event, context):
              return {
                  'statusCode': 200,
                  'body': json.dumps('Video processing function ready')
              }

  # ============================================================================
  # Step Functions
  # ============================================================================
  VideoProcessingStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: !Sub '${AWS::StackName}-video-processing-workflow'
      RoleArn: !GetAtt StepFunctionsRole.Arn
      DefinitionString: !Sub |
        {
          "Comment": "Memory Finder Video Processing Workflow",
          "StartAt": "ProcessVideo",
          "States": {
            "ProcessVideo": {
              "Type": "Task",
              "Resource": "${VideoProcessingFunction.Arn}",
              "Next": "TranscribeAudio",
              "Retry": [
                {
                  "ErrorEquals": ["States.ALL"],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 3
                }
              ]
            },
            "TranscribeAudio": {
              "Type": "Task",
              "Resource": "arn:aws:states:::transcribe:startTranscriptionJob.sync",
              "Parameters": {
                "TranscriptionJobName.$": "$.TranscriptionJobName",
                "Media.$": "$.Media",
                "MediaFormat": "mp4",
                "LanguageCode": "en-US"
              },
              "Next": "AnalyzeVideo",
              "Retry": [
                {
                  "ErrorEquals": ["States.ALL"],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 3
                }
              ]
            },
            "AnalyzeVideo": {
              "Type": "Task",
              "Resource": "arn:aws:states:::rekognition:detectLabels.sync",
              "Parameters": {
                "Image.$": "$.Image"
              },
              "Next": "CreateEmbeddings",
              "Retry": [
                {
                  "ErrorEquals": ["States.ALL"],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 3
                }
              ]
            },
            "CreateEmbeddings": {
              "Type": "Task",
              "Resource": "arn:aws:states:::bedrock:invokeModel.sync",
              "Parameters": {
                "ModelId": "amazon.titan-embed-text-v1",
                "Input.$": "$.Text"
              },
              "Next": "StoreResults",
              "Retry": [
                {
                  "ErrorEquals": ["States.ALL"],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 3
                }
              ]
            },
            "StoreResults": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke.sync",
              "Parameters": {
                "FunctionName": "${VideoProcessingFunction.Arn}",
                "Payload.$": "$"
              },
              "End": true,
              "Retry": [
                {
                  "ErrorEquals": ["States.ALL"],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 3
                }
              ]
            }
          }
        }

  StepFunctionsRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-stepfunctions-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSStepFunctionsFullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AmazonRekognitionFullAccess
        - arn:aws:iam::aws:policy/AmazonTranscribeFullAccess
      Policies:
        - PolicyName: LambdaAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                  - lambda:InvokeAsync
                Resource: !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:*'

  # ============================================================================
  # CloudFront Distribution
  # ============================================================================
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - Id: S3Origin
            DomainName: !GetAtt RawVideoBucket.RegionalDomainName
            S3OriginConfig:
              OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}'
        Enabled: true
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods: [GET, HEAD, OPTIONS]
          CachedMethods: [GET, HEAD]
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          Compress: true
        PriceClass: PriceClass_100
        ViewerCertificate:
          CloudFrontDefaultCertificate: true
        CustomErrorResponses:
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html

  CloudFrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub 'OAI for ${AWS::StackName}'

  # ============================================================================
  # Route53 Hosted Zone
  # ============================================================================
  HostedZone:
    Type: AWS::Route53::HostedZone
    Condition: IsProd
    Properties:
      Name: !Ref DomainName
      HostedZoneConfig:
        Comment: !Sub 'Hosted zone for ${DomainName}'

  # ============================================================================
  # SES Configuration
  # ============================================================================
  SESConfigurationSet:
    Type: AWS::SES::ConfigurationSet
    Properties:
      Name: !Sub '${AWS::StackName}-ses-config'

  # ============================================================================
  # CloudWatch Alarms
  # ============================================================================
  DatabaseCPUAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${AWS::StackName}-database-cpu-high'
      AlarmDescription: 'Database CPU utilization is high'
      MetricName: CPUUtilization
      Namespace: AWS/RDS
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 80
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: DBInstanceIdentifier
          Value: !Ref Database

  # ============================================================================
  # Outputs
  # ============================================================================
Outputs:
  VPCId:
    Description: 'VPC ID'
    Value: !Ref VPC
    Export:
      Name: !Sub '${AWS::StackName}-VPC-ID'

  DatabaseEndpoint:
    Description: 'Database endpoint'
    Value: !GetAtt Database.Endpoint.Address
    Export:
      Name: !Sub '${AWS::StackName}-Database-Endpoint'

  RedisEndpoint:
    Description: 'Redis endpoint'
    Value: !GetAtt RedisCluster.RedisEndpoint.Address
    Export:
      Name: !Sub '${AWS::StackName}-Redis-Endpoint'

  RawVideoBucketName:
    Description: 'Raw video S3 bucket name'
    Value: !Ref RawVideoBucket
    Export:
      Name: !Sub '${AWS::StackName}-RawVideo-Bucket'

  ProcessedVideoBucketName:
    Description: 'Processed video S3 bucket name'
    Value: !Ref ProcessedVideoBucket
    Export:
      Name: !Sub '${AWS::StackName}-ProcessedVideo-Bucket'

  CloudFrontDistributionDomain:
    Description: 'CloudFront distribution domain'
    Value: !GetAtt CloudFrontDistribution.DomainName
    Export:
      Name: !Sub '${AWS::StackName}-CloudFront-Domain'

  MediaConvertRoleArn:
    Description: 'MediaConvert role ARN'
    Value: !GetAtt MediaConvertRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-MediaConvert-Role'

  LambdaExecutionRoleArn:
    Description: 'Lambda execution role ARN'
    Value: !GetAtt LambdaExecutionRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-Lambda-Role'

  StepFunctionsStateMachineArn:
    Description: 'Step Functions state machine ARN'
    Value: !Ref VideoProcessingStateMachine
    Export:
      Name: !Sub '${AWS::StackName}-StepFunctions-StateMachine'
